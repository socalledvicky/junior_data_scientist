{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Исследование надёжности заёмщиков\n",
    "\n",
    "Заказчик — кредитный отдел банка. Нужно разобраться, влияет ли семейное положение и количество детей клиента на факт погашения кредита в срок. Входные данные от банка — статистика о платёжеспособности клиентов.\n",
    "\n",
    "Результаты исследования будут учтены при построении модели **кредитного скоринга** — специальной системы, которая оценивает способность потенциального заёмщика вернуть кредит банку."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Шаг 1. Откройте файл с данными и изучите общую информацию. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd #Прочитаем файл data.csv и сохраним его в переменной df.\n",
    "df = pd.read_csv('/datasets/data.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 21525 entries, 0 to 21524\n",
      "Data columns (total 12 columns):\n",
      "children            21525 non-null int64\n",
      "days_employed       19351 non-null float64\n",
      "dob_years           21525 non-null int64\n",
      "education           21525 non-null object\n",
      "education_id        21525 non-null int64\n",
      "family_status       21525 non-null object\n",
      "family_status_id    21525 non-null int64\n",
      "gender              21525 non-null object\n",
      "income_type         21525 non-null object\n",
      "debt                21525 non-null int64\n",
      "total_income        19351 non-null float64\n",
      "purpose             21525 non-null object\n",
      "dtypes: float64(2), int64(5), object(5)\n",
      "memory usage: 2.0+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info()  #Получим общую информацию о данных таблицы и выведем на экран первых 10 строк таблицы."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>children</th>\n",
       "      <th>days_employed</th>\n",
       "      <th>dob_years</th>\n",
       "      <th>education</th>\n",
       "      <th>education_id</th>\n",
       "      <th>family_status</th>\n",
       "      <th>family_status_id</th>\n",
       "      <th>gender</th>\n",
       "      <th>income_type</th>\n",
       "      <th>debt</th>\n",
       "      <th>total_income</th>\n",
       "      <th>purpose</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>-8437.673028</td>\n",
       "      <td>42</td>\n",
       "      <td>высшее</td>\n",
       "      <td>0</td>\n",
       "      <td>женат / замужем</td>\n",
       "      <td>0</td>\n",
       "      <td>F</td>\n",
       "      <td>сотрудник</td>\n",
       "      <td>0</td>\n",
       "      <td>253875.639453</td>\n",
       "      <td>покупка жилья</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>-4024.803754</td>\n",
       "      <td>36</td>\n",
       "      <td>среднее</td>\n",
       "      <td>1</td>\n",
       "      <td>женат / замужем</td>\n",
       "      <td>0</td>\n",
       "      <td>F</td>\n",
       "      <td>сотрудник</td>\n",
       "      <td>0</td>\n",
       "      <td>112080.014102</td>\n",
       "      <td>приобретение автомобиля</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>-5623.422610</td>\n",
       "      <td>33</td>\n",
       "      <td>Среднее</td>\n",
       "      <td>1</td>\n",
       "      <td>женат / замужем</td>\n",
       "      <td>0</td>\n",
       "      <td>M</td>\n",
       "      <td>сотрудник</td>\n",
       "      <td>0</td>\n",
       "      <td>145885.952297</td>\n",
       "      <td>покупка жилья</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>-4124.747207</td>\n",
       "      <td>32</td>\n",
       "      <td>среднее</td>\n",
       "      <td>1</td>\n",
       "      <td>женат / замужем</td>\n",
       "      <td>0</td>\n",
       "      <td>M</td>\n",
       "      <td>сотрудник</td>\n",
       "      <td>0</td>\n",
       "      <td>267628.550329</td>\n",
       "      <td>дополнительное образование</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>340266.072047</td>\n",
       "      <td>53</td>\n",
       "      <td>среднее</td>\n",
       "      <td>1</td>\n",
       "      <td>гражданский брак</td>\n",
       "      <td>1</td>\n",
       "      <td>F</td>\n",
       "      <td>пенсионер</td>\n",
       "      <td>0</td>\n",
       "      <td>158616.077870</td>\n",
       "      <td>сыграть свадьбу</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>-926.185831</td>\n",
       "      <td>27</td>\n",
       "      <td>высшее</td>\n",
       "      <td>0</td>\n",
       "      <td>гражданский брак</td>\n",
       "      <td>1</td>\n",
       "      <td>M</td>\n",
       "      <td>компаньон</td>\n",
       "      <td>0</td>\n",
       "      <td>255763.565419</td>\n",
       "      <td>покупка жилья</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>-2879.202052</td>\n",
       "      <td>43</td>\n",
       "      <td>высшее</td>\n",
       "      <td>0</td>\n",
       "      <td>женат / замужем</td>\n",
       "      <td>0</td>\n",
       "      <td>F</td>\n",
       "      <td>компаньон</td>\n",
       "      <td>0</td>\n",
       "      <td>240525.971920</td>\n",
       "      <td>операции с жильем</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>-152.779569</td>\n",
       "      <td>50</td>\n",
       "      <td>СРЕДНЕЕ</td>\n",
       "      <td>1</td>\n",
       "      <td>женат / замужем</td>\n",
       "      <td>0</td>\n",
       "      <td>M</td>\n",
       "      <td>сотрудник</td>\n",
       "      <td>0</td>\n",
       "      <td>135823.934197</td>\n",
       "      <td>образование</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>-6929.865299</td>\n",
       "      <td>35</td>\n",
       "      <td>ВЫСШЕЕ</td>\n",
       "      <td>0</td>\n",
       "      <td>гражданский брак</td>\n",
       "      <td>1</td>\n",
       "      <td>F</td>\n",
       "      <td>сотрудник</td>\n",
       "      <td>0</td>\n",
       "      <td>95856.832424</td>\n",
       "      <td>на проведение свадьбы</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>-2188.756445</td>\n",
       "      <td>41</td>\n",
       "      <td>среднее</td>\n",
       "      <td>1</td>\n",
       "      <td>женат / замужем</td>\n",
       "      <td>0</td>\n",
       "      <td>M</td>\n",
       "      <td>сотрудник</td>\n",
       "      <td>0</td>\n",
       "      <td>144425.938277</td>\n",
       "      <td>покупка жилья для семьи</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   children  days_employed  dob_years education  education_id  \\\n",
       "0         1   -8437.673028         42    высшее             0   \n",
       "1         1   -4024.803754         36   среднее             1   \n",
       "2         0   -5623.422610         33   Среднее             1   \n",
       "3         3   -4124.747207         32   среднее             1   \n",
       "4         0  340266.072047         53   среднее             1   \n",
       "5         0    -926.185831         27    высшее             0   \n",
       "6         0   -2879.202052         43    высшее             0   \n",
       "7         0    -152.779569         50   СРЕДНЕЕ             1   \n",
       "8         2   -6929.865299         35    ВЫСШЕЕ             0   \n",
       "9         0   -2188.756445         41   среднее             1   \n",
       "\n",
       "      family_status  family_status_id gender income_type  debt   total_income  \\\n",
       "0   женат / замужем                 0      F   сотрудник     0  253875.639453   \n",
       "1   женат / замужем                 0      F   сотрудник     0  112080.014102   \n",
       "2   женат / замужем                 0      M   сотрудник     0  145885.952297   \n",
       "3   женат / замужем                 0      M   сотрудник     0  267628.550329   \n",
       "4  гражданский брак                 1      F   пенсионер     0  158616.077870   \n",
       "5  гражданский брак                 1      M   компаньон     0  255763.565419   \n",
       "6   женат / замужем                 0      F   компаньон     0  240525.971920   \n",
       "7   женат / замужем                 0      M   сотрудник     0  135823.934197   \n",
       "8  гражданский брак                 1      F   сотрудник     0   95856.832424   \n",
       "9   женат / замужем                 0      M   сотрудник     0  144425.938277   \n",
       "\n",
       "                      purpose  \n",
       "0               покупка жилья  \n",
       "1     приобретение автомобиля  \n",
       "2               покупка жилья  \n",
       "3  дополнительное образование  \n",
       "4             сыграть свадьбу  \n",
       "5               покупка жилья  \n",
       "6           операции с жильем  \n",
       "7                 образование  \n",
       "8       на проведение свадьбы  \n",
       "9     покупка жилья для семьи  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "display(df.head(10))  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Всего в таблице 12 столбцов (признаков) и 21525 рядов (данных о клиентах). \n",
    "\n",
    "Разберём, какие в df столбцы и какую информацию они содержат:\n",
    "\n",
    "- children — количество детей в семье - количественная переменная - целое число\n",
    "- days_employed — общий трудовой стаж в днях - количественная переменная - число с плавающей точкой\n",
    "- dob_years — возраст клиента в годах - количественная переменная - целое число\n",
    "- education — уровень образования клиента -категориальная переменная -  объект\n",
    "- education_id — идентификатор уровня образования - целое число\n",
    "- family_status — семейное положение  - категориальная переменная - объект\n",
    "- family_status_id — идентификатор семейного положения  - категориальная переменная -  целое число\n",
    "- gender — пол клиента  -категориальная переменная - объект\n",
    "- income_type — тип занятости  -категориальная переменная -  объект\n",
    "- debt — имел ли задолженность по возврату кредитов - категориальная переменнная -целое число\n",
    "- total_income — ежемесячный доход -  количественная переменная - число с плавающей точкой\n",
    "- purpose — цель получения кредита  - категориальная переменная - объект\n",
    "\n",
    "Почти все столбцы не содержат пропусков, за исключением двух days_employed и total_income. \n",
    "\n",
    "Рассмотрим количественные переменные более подробно."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>children</th>\n",
       "      <th>days_employed</th>\n",
       "      <th>dob_years</th>\n",
       "      <th>education_id</th>\n",
       "      <th>family_status_id</th>\n",
       "      <th>debt</th>\n",
       "      <th>total_income</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>count</td>\n",
       "      <td>21525.000000</td>\n",
       "      <td>19351.000000</td>\n",
       "      <td>21525.000000</td>\n",
       "      <td>21525.000000</td>\n",
       "      <td>21525.000000</td>\n",
       "      <td>21525.000000</td>\n",
       "      <td>1.935100e+04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>mean</td>\n",
       "      <td>0.538908</td>\n",
       "      <td>63046.497661</td>\n",
       "      <td>43.293380</td>\n",
       "      <td>0.817236</td>\n",
       "      <td>0.972544</td>\n",
       "      <td>0.080883</td>\n",
       "      <td>1.674223e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>std</td>\n",
       "      <td>1.381587</td>\n",
       "      <td>140827.311974</td>\n",
       "      <td>12.574584</td>\n",
       "      <td>0.548138</td>\n",
       "      <td>1.420324</td>\n",
       "      <td>0.272661</td>\n",
       "      <td>1.029716e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>min</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>-18388.949901</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.066726e+04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>25%</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-2747.423625</td>\n",
       "      <td>33.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.030532e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>50%</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-1203.369529</td>\n",
       "      <td>42.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.450179e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>75%</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-291.095954</td>\n",
       "      <td>53.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.034351e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>max</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>401755.400475</td>\n",
       "      <td>75.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.265604e+06</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           children  days_employed     dob_years  education_id  \\\n",
       "count  21525.000000   19351.000000  21525.000000  21525.000000   \n",
       "mean       0.538908   63046.497661     43.293380      0.817236   \n",
       "std        1.381587  140827.311974     12.574584      0.548138   \n",
       "min       -1.000000  -18388.949901      0.000000      0.000000   \n",
       "25%        0.000000   -2747.423625     33.000000      1.000000   \n",
       "50%        0.000000   -1203.369529     42.000000      1.000000   \n",
       "75%        1.000000    -291.095954     53.000000      1.000000   \n",
       "max       20.000000  401755.400475     75.000000      4.000000   \n",
       "\n",
       "       family_status_id          debt  total_income  \n",
       "count      21525.000000  21525.000000  1.935100e+04  \n",
       "mean           0.972544      0.080883  1.674223e+05  \n",
       "std            1.420324      0.272661  1.029716e+05  \n",
       "min            0.000000      0.000000  2.066726e+04  \n",
       "25%            0.000000      0.000000  1.030532e+05  \n",
       "50%            0.000000      0.000000  1.450179e+05  \n",
       "75%            1.000000      0.000000  2.034351e+05  \n",
       "max            4.000000      1.000000  2.265604e+06  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Минимальное значение для столбцов children и days_employed отрицательное, скорее всего это ошибка.\n",
    "\n",
    "Теперь посмотрим на категориальные переменные. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "education : ['высшее' 'среднее' 'неоконченное высшее' 'начальное' 'ученая степень']\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "None"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "children : [1 0 3 2 4 5]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "None"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "gender : ['F' 'M' 'XNA']\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "None"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "family_status : ['женат / замужем' 'гражданский брак' 'вдовец / вдова' 'в разводе'\n",
      " 'Не женат / не замужем']\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "None"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "income_type : ['сотрудник' 'пенсионер' 'компаньон' 'госслужащий' 'безработный'\n",
      " 'предприниматель' 'студент' 'в декрете']\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "None"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "purpose : ['покупка жилья' 'приобретение автомобиля' 'дополнительное образование'\n",
      " 'сыграть свадьбу' 'операции с жильем' 'образование'\n",
      " 'на проведение свадьбы' 'покупка жилья для семьи' 'покупка недвижимости'\n",
      " 'покупка коммерческой недвижимости' 'покупка жилой недвижимости'\n",
      " 'строительство собственной недвижимости' 'недвижимость'\n",
      " 'строительство недвижимости' 'на покупку подержанного автомобиля'\n",
      " 'на покупку своего автомобиля' 'операции с коммерческой недвижимостью'\n",
      " 'строительство жилой недвижимости' 'жилье'\n",
      " 'операции со своей недвижимостью' 'автомобили' 'заняться образованием'\n",
      " 'сделка с подержанным автомобилем' 'получение образования' 'автомобиль'\n",
      " 'свадьба' 'получение дополнительного образования' 'покупка своего жилья'\n",
      " 'операции с недвижимостью' 'получение высшего образования'\n",
      " 'свой автомобиль' 'сделка с автомобилем' 'профильное образование'\n",
      " 'высшее образование' 'покупка жилья для сдачи' 'на покупку автомобиля'\n",
      " 'ремонт жилью' 'заняться высшим образованием']\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "None"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "debt : [0 1]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "None"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "def check_unique(data):\n",
    "    print(data.name, \":\",  data.unique())  #метод unique позволит нам увидеть список всех вариантов для переменной\n",
    "\n",
    "cat_var = [df['education'],df['children'],df['gender'],df['family_status'],df['income_type'],df['purpose'],df['debt']]  \n",
    "\n",
    "\n",
    "for var in cat_var:\n",
    "    display(check_unique(var))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Вывод"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Каждая строка таблицы содержит информацию о заемщиках банка. Наша задача выяснить, как семейный статус и наличие детей влияет на платежеспособность заемщика. Особый интерес для нас представляют столбцы family_status, children, debt.\n",
    "\n",
    "Для начала необходимо подготовить данные для анализа. Уже видно, что некоторые переменные содержат ошибки. Например, в информации о детях есть отрицательное значение и значение 20 (либо это очень многодетная семья, либо опечатка). Скорее всего в данных есть дубликаты. Уже сейчас мы знаем, что одинаковое образование записано в по-разному. \n",
    "\n",
    "В столбце с целью кредита много значений, но некоторые из них описывают одну и ту же цель одинаковыми словами. Такие повторы необходимо убрать и выделить схожие цели."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Шаг 2. Предобработка данных"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Исключим пропуски и проверим данные на наличие дубликатов."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Обработка пропусков"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "children               0\n",
      "days_employed       2174\n",
      "dob_years              0\n",
      "education              0\n",
      "education_id           0\n",
      "family_status          0\n",
      "family_status_id       0\n",
      "gender                 0\n",
      "income_type            0\n",
      "debt                   0\n",
      "total_income        2174\n",
      "purpose                0\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(df.isna().sum()) #проверяем количество пропусков вызовом набора методов для суммирования пропущенных значений."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Пустые значения свидетельствуют, что у некоторых клиентов зафиксирована не вся информация. Отсутсвуют данные о зарплате и о трудовом стаже.  Причины могут быть разные: заемщик являлся безработным, его не спросили об этом или он скрыл эти данные намеренно. \n",
    "\n",
    "Люди часто не отвечают на вопрос о своих доходах. Образование сильно коррелирует с доходами, значит пропуски в поле доходы нельзя считать совершенно случайными. Выполняется гипотеза MAR. MAR (Missing At Random) — данные пропущены не случайно, а ввиду некоторых закономерностей.  В случае MAR исключение пропусков вполне приемлемо.\n",
    "\n",
    "Однако, удаление почти 10% данных приведет к неправильным выводам. Пропуски можно заполнить пропуски можно средним арифметическим или медианой. Для дохода больше подойдет медиана, для стажа можно использовать среднее. \n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "При изучении переменных мы заметили отрицательные значения в столбце days_employed, заменим их на положительные значения с помощью метода abs()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['days_employed'] = df['days_employed'].abs() #замена отрицательных чисел на абсолютное значение\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Среднее значение трудового стажа, в днях: 66914\n",
      "Медианное значение дохода: 145017\n",
      "children            0\n",
      "days_employed       0\n",
      "dob_years           0\n",
      "education           0\n",
      "education_id        0\n",
      "family_status       0\n",
      "family_status_id    0\n",
      "gender              0\n",
      "income_type         0\n",
      "debt                0\n",
      "total_income        0\n",
      "purpose             0\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "mean_days_employed = df['days_employed'].mean() #расчитаем среднее значение вызовом метода mean\n",
    "print('Среднее значение трудового стажа, в днях: {}'.format(int(mean_days_employed)))\n",
    "\n",
    "median_total_income = df['total_income'].median() #расчитаем медианное значение вызовом метода median\n",
    "print('Медианное значение дохода: {}'.format(int(median_total_income)))\n",
    "\n",
    "df['days_employed']= df['days_employed'].fillna(mean_days_employed) #заполним пропуски в столбце days_employed средним значением трудового стажа для нашей выборки\n",
    "df['total_income']= df['total_income'].fillna(median_total_income) #пропуски в столбце total_income заменим медианным значением дохода\n",
    "print(df.isna().sum()) #проверяем количество пропусков теперь\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Вывод"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Теперь наш набор данных не содержит пропусков. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Замена типа данных"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Для удобства приведем все значения к целому числу - к типу int. Также заменим ошибочные отрицательные значения"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0          8437\n",
      "1          4024\n",
      "2          5623\n",
      "3          4124\n",
      "4        340266\n",
      "          ...  \n",
      "21520      4529\n",
      "21521    343937\n",
      "21522      2113\n",
      "21523      3112\n",
      "21524      1984\n",
      "Name: days_employed, Length: 21525, dtype: int64\n",
      "0        253875\n",
      "1        112080\n",
      "2        145885\n",
      "3        267628\n",
      "4        158616\n",
      "          ...  \n",
      "21520    224791\n",
      "21521    155999\n",
      "21522     89672\n",
      "21523    244093\n",
      "21524     82047\n",
      "Name: total_income, Length: 21525, dtype: int64\n",
      "[ 1  0  3  2 -1  4 20  5]\n",
      "[ 1  0  3  2  4 20  5]\n"
     ]
    }
   ],
   "source": [
    "\n",
    "df['days_employed'] = df['days_employed'].astype('int') #приведение к целому числу\n",
    "print(df['days_employed'])\n",
    "df['total_income'] = df['total_income'].astype('int') #приведение к целому числу\n",
    "print(df['total_income'])\n",
    "\n",
    "print(df['children'].unique()) #среди уникальных есть значение -1, можно предположить, что это опечатка\n",
    "df['children'] = df['children'].abs() #замена отрицательных чисел на абсолютное значение\n",
    "print(df['children'].unique())\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Наличие 20 детей - редкость. Можно допустить, что в один банк может обратиться несколько семей с ровно 20 детьми. Проверим, сколько строк содержат такое значение.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0     14149\n",
      "1      4865\n",
      "2      2055\n",
      "3       330\n",
      "20       76\n",
      "4        41\n",
      "5         9\n",
      "Name: children, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(df['children'].value_counts()) \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Одна семья с 20 детьми - еще возможно, несколько семей с 20 детьми - тоже вероятно, 76 семей - похоже на опечатку. Скорее, всего там лишний ноль. Заменим на число 2. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0    14149\n",
      "1     4865\n",
      "2     2131\n",
      "3      330\n",
      "4       41\n",
      "5        9\n",
      "Name: children, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "\n",
    "df.loc[df['children']==20, 'children']=2 \n",
    "print(df['children'].value_counts())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Вывод"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Теперь в данных нет опечаток, которые могут исказить результат, а также используются более подходящие для вычислений типы данных."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Обработка дубликатов"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Сначала уберем уже найденные повторения в столбце education. Одинаковое образование написано в разных регистрах. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "среднее                13750\n",
      "высшее                  4718\n",
      "СРЕДНЕЕ                  772\n",
      "Среднее                  711\n",
      "неоконченное высшее      668\n",
      "ВЫСШЕЕ                   274\n",
      "Высшее                   268\n",
      "начальное                250\n",
      "Неоконченное высшее       47\n",
      "НЕОКОНЧЕННОЕ ВЫСШЕЕ       29\n",
      "НАЧАЛЬНОЕ                 17\n",
      "Начальное                 15\n",
      "ученая степень             4\n",
      "УЧЕНАЯ СТЕПЕНЬ             1\n",
      "Ученая степень             1\n",
      "Name: education, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(df['education'].value_counts())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Приведем все переменные к одному регистру."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "среднее                15233\n",
      "высшее                  5260\n",
      "неоконченное высшее      744\n",
      "начальное                282\n",
      "ученая степень             6\n",
      "Name: education, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "df['education'] = df['education'].str.lower()\n",
    "print(df['education'].value_counts())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Теперь проверим наличие дублирующих строк"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "71\n",
      "0\n"
     ]
    }
   ],
   "source": [
    "print(df.duplicated().sum())  #проверяем кол-во повторяющихся строк\n",
    "df = df.drop_duplicates().reset_index(drop=True)  #удаляем дубликаты с сохранением индексов\n",
    "print(df.duplicated().sum()) #проверяем, что дубликатов не осталось"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Вывод"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Дублирование значений в столбце образование может быть связано с тем, что данные вводят разные операторы, кто-то предпочитает писать все в верхнем регистре, а кто-то наоборот. Дубликаты строк могли возникнут из-за технического сбоя или задублированы при переносе данных в базу. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Лемматизация"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Для анализа нам нужно выяснить, какие самые популярные цели для кредита. В сыром виде анализировать столбец purpose сложно: цели записаны произвольно. Необходимо привести их к одному виду. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "38\n"
     ]
    }
   ],
   "source": [
    "print(len(df['purpose'].unique())) #посчитаем сколько все уникальных записей целей кредита"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "purposes = df['purpose'].tolist()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Избавимся от одинаковых по смыслу дубликатов с помощью лемматизации, то есть приведем слова к словарной форме"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Counter({' ': 55023, 'недвижимость': 6351, 'покупка': 5897, 'жилье': 4460, 'автомобиль': 4306, 'образование': 4013, 'с': 2918, 'операция': 2604, 'свадьба': 2324, 'свой': 2230, 'на': 2222, 'строительство': 1878, 'высокий': 1374, 'получение': 1314, 'коммерческий': 1311, 'для': 1289, 'жилой': 1230, 'сделка': 941, 'дополнительный': 906, 'заниматься': 904, 'подержать': 853, 'проведение': 768, 'сыграть': 765, 'сдача': 651, 'семья': 638, 'собственный': 635, 'со': 627, 'ремонт': 607, 'приобретение': 461, 'профильный': 436, 'подержанный': 111, '\\n': 1})\n"
     ]
    }
   ],
   "source": [
    "\n",
    "purposes = ' '.join(purposes)\n",
    "\n",
    "#импортируем библиотеку с функцией лемматизации на русском языке \n",
    "from pymystem3 import Mystem\n",
    "m = Mystem()\n",
    "#передаем функции в качестве аргумента - список целей \n",
    "lemmas = m.lemmatize(purposes)\n",
    "\n",
    "\n",
    "#подчитаем число упоминаний лемматизируемых слов \n",
    "from collections import Counter\n",
    "print(Counter(lemmas))\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Добавим в датафрейм столбец, который будет содержать соответвующую столбцу purpose лемму"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0                 [покупка,  , жилье, \\n]\n",
      "1       [приобретение,  , автомобиль, \\n]\n",
      "2                 [покупка,  , жилье, \\n]\n",
      "3    [дополнительный,  , образование, \\n]\n",
      "4               [сыграть,  , свадьба, \\n]\n",
      "Name: purpose_lemmas, dtype: object\n"
     ]
    }
   ],
   "source": [
    "def lemmatize(col):\n",
    "    return m.lemmatize(col)\n",
    "                        \n",
    "df['purpose_lemmas'] = df['purpose'].apply(lemmatize)                \n",
    "\n",
    "print(df['purpose_lemmas'].head())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Вывод"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Самая частая цель кредита - это приобретение недвижимости и жилья, на втором месте - покупка автомобиля, на третьем - образование. Затем идут операции и свадьбы."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Категоризация данных"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Наша основная задача - выяснить, влияет ли семейное положение и количество детей клиента на факт погашения кредита в срок. Выделим категории для анализа. \n",
    "\n",
    "Категории по наличию детей\n",
    "- есть дети (1-2 ребенка)\n",
    "- многодетные (3 и более)\n",
    "- нет детей (0)\n",
    "\n",
    "Категории по семейному положению:\n",
    "- состоит в браке (отнесем сюда и гражданский, и зарегистрированный)\n",
    "- не состоит в браке (отнесем сюда одиноких, вдовцов и в разводе)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "в браке       16490\n",
      "не в браке     4964\n",
      "Name: marriage_status, dtype: int64\n",
      "нет детей      14091\n",
      "есть дети       6983\n",
      "многодетные      380\n",
      "Name: children_category, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "#создадим функцию, которая будет определять категорию при выполнении условия\n",
    "\n",
    "def children_category(kids):\n",
    "    if kids == 0:\n",
    "        return 'нет детей'\n",
    "    if kids >= 1 and kids <= 2:\n",
    "        return 'есть дети'\n",
    "    if kids >= 3:\n",
    "        return 'многодетные'\n",
    "#добавим новый столбец с категориями children_category\n",
    "df['children_category'] = df['children'].apply(children_category)\n",
    "\n",
    "    \n",
    "\n",
    "def marriage_status(family_status_id):\n",
    "    if family_status_id in (0, 1):\n",
    "        return 'в браке'\n",
    "    if family_status_id in (2,3,4):\n",
    "        return 'не в браке'\n",
    "    #добавим новый столбец с категорией marriage_status\n",
    "\n",
    "df['marriage_status'] = df['family_status_id'].apply(marriage_status)\n",
    "\n",
    "print(df['marriage_status'].value_counts())\n",
    "print(df['children_category'].value_counts())\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Выделим категории по доходу. При разбиении будем ориентироваться на данные по зарплате в РФ. Средняя зарплата по стране - 43 400 рублей"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "max 2265604\n",
      "min 20667\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "выше среднего    9994\n",
       "высокий          8962\n",
       "средний доход    2059\n",
       "очень высокий     222\n",
       "низкий доход      217\n",
       "Name: total_income_group, dtype: int64"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print('max', df['total_income'].max())\n",
    "print('min', df['total_income'].min())\n",
    "\n",
    "\n",
    "def total_income_group(total_income):\n",
    "    if total_income < 45000:\n",
    "        return 'низкий доход'\n",
    "    if total_income >= 45000 and total_income <= 80000:\n",
    "        return 'средний доход'\n",
    "    if total_income > 80000  and total_income <= 150000:\n",
    "        return 'выше среднего'\n",
    "    if total_income > 150000  and total_income <= 500000:\n",
    "        return 'высокий'\n",
    "    if total_income > 500000:\n",
    "        return 'очень высокий'\n",
    "#добавим новый столбец с категорией total_income_group\n",
    "df['total_income_group'] = df['total_income'].apply(total_income_group)\n",
    "df['total_income_group'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Выделим категории по целям"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0          жилье\n",
      "1     автомобиль\n",
      "2          жилье\n",
      "3    образование\n",
      "4        свадьба\n",
      "Name: category_purpose, dtype: object\n"
     ]
    }
   ],
   "source": [
    "def category_purpose(lemmas):\n",
    "    for word in lemmas:\n",
    "        if 'жилье' in word:\n",
    "            return 'жилье'\n",
    "        elif 'образование' in word:\n",
    "            return 'образование'\n",
    "        elif 'недвижимость' in word:\n",
    "            return 'недвижимость'\n",
    "        elif 'свадьба' in word:\n",
    "            return 'свадьба'\n",
    "        elif 'автомобиль' in word:\n",
    "            return 'автомобиль'\n",
    "        elif 'операция' in word:\n",
    "            return 'операция'\n",
    "        \n",
    "    \n",
    "    \n",
    "                \n",
    "df['category_purpose'] = df['purpose_lemmas'].apply(category_purpose)                \n",
    "\n",
    "print(df['category_purpose'].head())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Вывод"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "За кредитом обращалось больше людей, состоящих в браке, чем одиноких. С детьми кредит брали реже. Люди с низким доходом и с очень высоким доходом в выборке представлены меньше. Больше всего заемщиков с высоким и с доходом выше среднего. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Шаг 3. Ответьте на вопросы"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Есть ли зависимость между наличием детей и возвратом кредита в срок?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>children_category</th>\n",
       "      <th>debt</th>\n",
       "      <th>children</th>\n",
       "      <th>share</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>есть дети</td>\n",
       "      <td>0</td>\n",
       "      <td>6336</td>\n",
       "      <td>0.30%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>есть дети</td>\n",
       "      <td>1</td>\n",
       "      <td>647</td>\n",
       "      <td>0.03%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>многодетные</td>\n",
       "      <td>0</td>\n",
       "      <td>349</td>\n",
       "      <td>0.02%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>многодетные</td>\n",
       "      <td>1</td>\n",
       "      <td>31</td>\n",
       "      <td>0.00%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>нет детей</td>\n",
       "      <td>0</td>\n",
       "      <td>13028</td>\n",
       "      <td>0.61%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>нет детей</td>\n",
       "      <td>1</td>\n",
       "      <td>1063</td>\n",
       "      <td>0.05%</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  children_category  debt  children  share\n",
       "0         есть дети     0      6336  0.30%\n",
       "1         есть дети     1       647  0.03%\n",
       "2       многодетные     0       349  0.02%\n",
       "3       многодетные     1        31  0.00%\n",
       "4         нет детей     0     13028  0.61%\n",
       "5         нет детей     1      1063  0.05%"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "children_debt = df.pivot_table(index = ['children_category', 'debt'], values = 'children', aggfunc = 'count').reset_index()\n",
    "\n",
    "#посчитаем долю каждой группы от общего количества пользователей\n",
    "def share(col):\n",
    "    return \"{0:.2f}%\".format(col/len(df)) \n",
    "\n",
    "children_debt['share']=children_debt['children'].apply(share) \n",
    "children_debt\n",
    "\n",
    "\n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style  type=\"text/css\" >\n",
       "</style><table id=\"T_7e2e6a92_f73b_11ea_8185_02420a390505\" ><thead>    <tr>        <th class=\"blank level0\" ></th>        <th class=\"col_heading level0 col0\" >children_category</th>        <th class=\"col_heading level0 col1\" >debt</th>    </tr></thead><tbody>\n",
       "                <tr>\n",
       "                        <th id=\"T_7e2e6a92_f73b_11ea_8185_02420a390505level0_row0\" class=\"row_heading level0 row0\" >0</th>\n",
       "                        <td id=\"T_7e2e6a92_f73b_11ea_8185_02420a390505row0_col0\" class=\"data row0 col0\" >есть дети</td>\n",
       "                        <td id=\"T_7e2e6a92_f73b_11ea_8185_02420a390505row0_col1\" class=\"data row0 col1\" >9.27%</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_7e2e6a92_f73b_11ea_8185_02420a390505level0_row1\" class=\"row_heading level0 row1\" >1</th>\n",
       "                        <td id=\"T_7e2e6a92_f73b_11ea_8185_02420a390505row1_col0\" class=\"data row1 col0\" >многодетные</td>\n",
       "                        <td id=\"T_7e2e6a92_f73b_11ea_8185_02420a390505row1_col1\" class=\"data row1 col1\" >8.16%</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_7e2e6a92_f73b_11ea_8185_02420a390505level0_row2\" class=\"row_heading level0 row2\" >2</th>\n",
       "                        <td id=\"T_7e2e6a92_f73b_11ea_8185_02420a390505row2_col0\" class=\"data row2 col0\" >нет детей</td>\n",
       "                        <td id=\"T_7e2e6a92_f73b_11ea_8185_02420a390505row2_col1\" class=\"data row2 col1\" >7.54%</td>\n",
       "            </tr>\n",
       "    </tbody></table>"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x7f79a8d86cd0>"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.pivot_table(index = 'children_category', \n",
    "               values = 'debt', \n",
    "               aggfunc = 'mean').reset_index().style.format({'debt': '{:.2%}'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.7/site-packages/ipykernel_launcher.py:21: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/opt/conda/lib/python3.7/site-packages/ipykernel_launcher.py:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/opt/conda/lib/python3.7/site-packages/ipykernel_launcher.py:31: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>children_category</th>\n",
       "      <th>debt</th>\n",
       "      <th>children</th>\n",
       "      <th>share</th>\n",
       "      <th>share_in_group</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>есть дети</td>\n",
       "      <td>0</td>\n",
       "      <td>6336</td>\n",
       "      <td>0.30%</td>\n",
       "      <td>0.907%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>есть дети</td>\n",
       "      <td>1</td>\n",
       "      <td>647</td>\n",
       "      <td>0.03%</td>\n",
       "      <td>0.093%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>нет детей</td>\n",
       "      <td>0</td>\n",
       "      <td>13028</td>\n",
       "      <td>0.61%</td>\n",
       "      <td>0.925%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>нет детей</td>\n",
       "      <td>1</td>\n",
       "      <td>1063</td>\n",
       "      <td>0.05%</td>\n",
       "      <td>0.075%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>многодетные</td>\n",
       "      <td>0</td>\n",
       "      <td>349</td>\n",
       "      <td>0.02%</td>\n",
       "      <td>0.918%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>многодетные</td>\n",
       "      <td>1</td>\n",
       "      <td>31</td>\n",
       "      <td>0.00%</td>\n",
       "      <td>0.082%</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  children_category  debt  children  share share_in_group\n",
       "0         есть дети     0      6336  0.30%         0.907%\n",
       "1         есть дети     1       647  0.03%         0.093%\n",
       "4         нет детей     0     13028  0.61%         0.925%\n",
       "5         нет детей     1      1063  0.05%         0.075%\n",
       "2       многодетные     0       349  0.02%         0.918%\n",
       "3       многодетные     1        31  0.00%         0.082%"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#выделим срезы из набора данных для разных категорий по наличию детей\n",
    "\n",
    "children_debt_1 = children_debt[children_debt['children_category']=='есть дети']\n",
    "children_debt_2 = children_debt[children_debt['children_category']=='нет детей']\n",
    "children_debt_3 = children_debt[children_debt['children_category']=='многодетные']\n",
    "\n",
    "#посчитаем численность групп\n",
    "\n",
    "children_debt_1_sum = children_debt[children_debt['children_category']=='есть дети']['children'].sum()\n",
    "children_debt_2_sum = children_debt[children_debt['children_category']=='нет детей']['children'].sum()\n",
    "children_debt_3_sum = children_debt[children_debt['children_category']=='многодетные']['children'].sum()\n",
    "\n",
    "#посчитаем относительные значения внутри группы.\n",
    "#я не могу написать одну функцию для трех случаев, потому что не понимаю, \n",
    "#как передать аргумент children_debt_1_sum при методе apply\n",
    "\n",
    "#получается ужасно, но получается :)\n",
    "\n",
    "def share_in_group(col): \n",
    "    return \"{0:.3f}%\".format(col/children_debt_1_sum)\n",
    "children_debt_1['share_in_group']=children_debt_1['children'].apply(share_in_group)\n",
    "\n",
    "\n",
    "def share_in_group(col):\n",
    "    return \"{0:.3f}%\".format(col/children_debt_2_sum)\n",
    "children_debt_2['share_in_group']=children_debt_2['children'].apply(share_in_group)\n",
    "\n",
    "\n",
    "def share_in_group(col):\n",
    "    return \"{0:.3f}%\".format(col/children_debt_3_sum)\n",
    "children_debt_3['share_in_group']=children_debt_3['children'].apply(share_in_group)\n",
    "\n",
    "\n",
    "total = [children_debt_1, children_debt_2, children_debt_3 ]\n",
    "total = pd.concat(total)\n",
    "total"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Вывод"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Если выделять доли внутри группы, то получается, что доля задолжников с детьми выше, чем без.\n",
    "\n",
    "\n",
    "Старый комментарий. Доля задолжников без детей выше, чем с детьми. Интересно посмотреть, как распределены доходы между заемщиками с детьми и без.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>children</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>children_category</th>\n",
       "      <th>total_income_group</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td rowspan=\"5\" valign=\"top\">есть дети</td>\n",
       "      <td>высокий</td>\n",
       "      <td>2971</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>выше среднего</td>\n",
       "      <td>3297</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>низкий доход</td>\n",
       "      <td>58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>очень высокий</td>\n",
       "      <td>85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>средний доход</td>\n",
       "      <td>572</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td rowspan=\"5\" valign=\"top\">многодетные</td>\n",
       "      <td>высокий</td>\n",
       "      <td>172</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>выше среднего</td>\n",
       "      <td>172</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>низкий доход</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>очень высокий</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>средний доход</td>\n",
       "      <td>29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td rowspan=\"5\" valign=\"top\">нет детей</td>\n",
       "      <td>высокий</td>\n",
       "      <td>5819</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>выше среднего</td>\n",
       "      <td>6525</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>низкий доход</td>\n",
       "      <td>158</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>очень высокий</td>\n",
       "      <td>131</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>средний доход</td>\n",
       "      <td>1458</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                        count\n",
       "                                     children\n",
       "children_category total_income_group         \n",
       "есть дети         высокий                2971\n",
       "                  выше среднего          3297\n",
       "                  низкий доход             58\n",
       "                  очень высокий            85\n",
       "                  средний доход           572\n",
       "многодетные       высокий                 172\n",
       "                  выше среднего           172\n",
       "                  низкий доход              1\n",
       "                  очень высокий             6\n",
       "                  средний доход            29\n",
       "нет детей         высокий                5819\n",
       "                  выше среднего          6525\n",
       "                  низкий доход            158\n",
       "                  очень высокий           131\n",
       "                  средний доход          1458"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "children_income = df.pivot_table(index = ['children_category', 'total_income_group'], values = 'children', aggfunc = ['count'])\n",
    "children_income\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "У клиентов с детьми в среднем высокий доход встречается чаще. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Есть ли зависимость между семейным положением и возвратом кредита в срок?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.7/site-packages/ipykernel_launcher.py:15: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  from ipykernel import kernelapp as app\n",
      "/opt/conda/lib/python3.7/site-packages/ipykernel_launcher.py:23: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>marriage_status</th>\n",
       "      <th>debt</th>\n",
       "      <th>family_status</th>\n",
       "      <th>share</th>\n",
       "      <th>share_in_group</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>не в браке</td>\n",
       "      <td>0</td>\n",
       "      <td>4542</td>\n",
       "      <td>0.21%</td>\n",
       "      <td>0.91%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>не в браке</td>\n",
       "      <td>1</td>\n",
       "      <td>422</td>\n",
       "      <td>0.02%</td>\n",
       "      <td>0.09%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>в браке</td>\n",
       "      <td>0</td>\n",
       "      <td>15171</td>\n",
       "      <td>0.71%</td>\n",
       "      <td>0.92%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>в браке</td>\n",
       "      <td>1</td>\n",
       "      <td>1319</td>\n",
       "      <td>0.06%</td>\n",
       "      <td>0.08%</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  marriage_status  debt  family_status  share share_in_group\n",
       "2      не в браке     0           4542  0.21%          0.91%\n",
       "3      не в браке     1            422  0.02%          0.09%\n",
       "0         в браке     0          15171  0.71%          0.92%\n",
       "1         в браке     1           1319  0.06%          0.08%"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "marriage_debt = df.pivot_table(index = ['marriage_status', 'debt'], values = 'family_status', aggfunc = 'count').reset_index()\n",
    "\n",
    "def share(col):\n",
    "    return \"{0:.2f}%\".format(col/len(df)) \n",
    "\n",
    "marriage_debt['share']=marriage_debt['family_status'].apply(share)\n",
    "\n",
    "\n",
    "marriage_debt_true = marriage_debt[marriage_debt['marriage_status']=='в браке']\n",
    "marriage_debt_true_sum = marriage_debt[marriage_debt['marriage_status']=='в браке']['family_status'].sum()\n",
    "\n",
    "def share_in_group(col):\n",
    "    return \"{0:.2f}%\".format(col/marriage_debt_true_sum)\n",
    "\n",
    "marriage_debt_true['share_in_group']=marriage_debt_true['family_status'].apply(share_in_group)\n",
    "\n",
    "marriage_debt_false = marriage_debt[marriage_debt['marriage_status']=='не в браке']\n",
    "marriage_debt_false_sum = marriage_debt[marriage_debt['marriage_status']=='не в браке']['family_status'].sum()\n",
    "\n",
    "def share_in_group(col):\n",
    "    return \"{0:.2f}%\".format(col/marriage_debt_false_sum)\n",
    "\n",
    "marriage_debt_false['share_in_group']=marriage_debt_false['family_status'].apply(share_in_group)\n",
    "total = [marriage_debt_false, marriage_debt_true]\n",
    "total = pd.concat(total)\n",
    "total"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.7/site-packages/ipykernel_launcher.py:15: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  from ipykernel import kernelapp as app\n",
      "/opt/conda/lib/python3.7/site-packages/ipykernel_launcher.py:23: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>marriage_status</th>\n",
       "      <th>debt</th>\n",
       "      <th>family_status</th>\n",
       "      <th>share</th>\n",
       "      <th>share_in_group</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>в браке</td>\n",
       "      <td>0</td>\n",
       "      <td>15171</td>\n",
       "      <td>0.71%</td>\n",
       "      <td>0.77%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>не в браке</td>\n",
       "      <td>0</td>\n",
       "      <td>4542</td>\n",
       "      <td>0.21%</td>\n",
       "      <td>0.23%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>в браке</td>\n",
       "      <td>1</td>\n",
       "      <td>1319</td>\n",
       "      <td>0.06%</td>\n",
       "      <td>0.76%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>не в браке</td>\n",
       "      <td>1</td>\n",
       "      <td>422</td>\n",
       "      <td>0.02%</td>\n",
       "      <td>0.24%</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  marriage_status  debt  family_status  share share_in_group\n",
       "0         в браке     0          15171  0.71%          0.77%\n",
       "2      не в браке     0           4542  0.21%          0.23%\n",
       "1         в браке     1           1319  0.06%          0.76%\n",
       "3      не в браке     1            422  0.02%          0.24%"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "marriage_debt = df.pivot_table(index = ['marriage_status', 'debt'], values = 'family_status', aggfunc = 'count').reset_index()\n",
    "\n",
    "def share(col):\n",
    "    return \"{0:.2f}%\".format(col/len(df)) \n",
    "\n",
    "marriage_debt['share']=marriage_debt['family_status'].apply(share)\n",
    "\n",
    "\n",
    "marriage_debt_true = marriage_debt[marriage_debt['debt']==1]\n",
    "marriage_debt_true_sum = marriage_debt[marriage_debt['debt']==1]['family_status'].sum()\n",
    "\n",
    "def share_in_group(col):\n",
    "    return \"{0:.2f}%\".format(col/marriage_debt_true_sum)\n",
    "\n",
    "marriage_debt_true['share_in_group']=marriage_debt_true['family_status'].apply(share_in_group)\n",
    "\n",
    "marriage_debt_false = marriage_debt[marriage_debt['debt']==0]\n",
    "marriage_debt_false_sum = marriage_debt[marriage_debt['debt']==0]['family_status'].sum()\n",
    "\n",
    "def share_in_group(col):\n",
    "    return \"{0:.2f}%\".format(col/marriage_debt_false_sum)\n",
    "\n",
    "marriage_debt_false['share_in_group']=marriage_debt_false['family_status'].apply(share_in_group)\n",
    "total = [marriage_debt_false, marriage_debt_true]\n",
    "total = pd.concat(total)\n",
    "total"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "В столбце share_in_group видно, что доля людей в браке среди невозвращающих выше.  \n",
    "Проблем с возвратом больше у состоящих в браке, чем у одиноких людей. Дополнительно посмотрим, как много задолжностей у женатых/замужных с детьми и без."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>children</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>marriage_status</th>\n",
       "      <th>children_category</th>\n",
       "      <th>debt</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td rowspan=\"6\" valign=\"top\">в браке</td>\n",
       "      <td rowspan=\"2\" valign=\"top\">есть дети</td>\n",
       "      <td>0</td>\n",
       "      <td>5395</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>546</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td rowspan=\"2\" valign=\"top\">многодетные</td>\n",
       "      <td>0</td>\n",
       "      <td>323</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td rowspan=\"2\" valign=\"top\">нет детей</td>\n",
       "      <td>0</td>\n",
       "      <td>9453</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>745</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td rowspan=\"6\" valign=\"top\">не в браке</td>\n",
       "      <td rowspan=\"2\" valign=\"top\">есть дети</td>\n",
       "      <td>0</td>\n",
       "      <td>941</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>101</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td rowspan=\"2\" valign=\"top\">многодетные</td>\n",
       "      <td>0</td>\n",
       "      <td>26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td rowspan=\"2\" valign=\"top\">нет детей</td>\n",
       "      <td>0</td>\n",
       "      <td>3575</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>318</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                          count\n",
       "                                       children\n",
       "marriage_status children_category debt         \n",
       "в браке         есть дети         0        5395\n",
       "                                  1         546\n",
       "                многодетные       0         323\n",
       "                                  1          28\n",
       "                нет детей         0        9453\n",
       "                                  1         745\n",
       "не в браке      есть дети         0         941\n",
       "                                  1         101\n",
       "                многодетные       0          26\n",
       "                                  1           3\n",
       "                нет детей         0        3575\n",
       "                                  1         318"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "marriage_children = df.pivot_table(index = ['marriage_status', 'children_category', 'debt'], values = ['children'], aggfunc = ['count'])\n",
    "display(marriage_children)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Вывод"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Число задолжников без детей выше и среди женатых, и среди одиноких. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Есть ли зависимость между уровнем дохода и возвратом кредита в срок?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>total_income_group</th>\n",
       "      <th>debt</th>\n",
       "      <th>total_income</th>\n",
       "      <th>share</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>высокий</td>\n",
       "      <td>0</td>\n",
       "      <td>8250</td>\n",
       "      <td>0.38%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>высокий</td>\n",
       "      <td>1</td>\n",
       "      <td>712</td>\n",
       "      <td>0.03%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>выше среднего</td>\n",
       "      <td>0</td>\n",
       "      <td>9153</td>\n",
       "      <td>0.43%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>выше среднего</td>\n",
       "      <td>1</td>\n",
       "      <td>841</td>\n",
       "      <td>0.04%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>низкий доход</td>\n",
       "      <td>0</td>\n",
       "      <td>203</td>\n",
       "      <td>0.01%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>низкий доход</td>\n",
       "      <td>1</td>\n",
       "      <td>14</td>\n",
       "      <td>0.00%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>очень высокий</td>\n",
       "      <td>0</td>\n",
       "      <td>208</td>\n",
       "      <td>0.01%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>очень высокий</td>\n",
       "      <td>1</td>\n",
       "      <td>14</td>\n",
       "      <td>0.00%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>средний доход</td>\n",
       "      <td>0</td>\n",
       "      <td>1899</td>\n",
       "      <td>0.09%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>средний доход</td>\n",
       "      <td>1</td>\n",
       "      <td>160</td>\n",
       "      <td>0.01%</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  total_income_group  debt  total_income  share\n",
       "0            высокий     0          8250  0.38%\n",
       "1            высокий     1           712  0.03%\n",
       "2      выше среднего     0          9153  0.43%\n",
       "3      выше среднего     1           841  0.04%\n",
       "4       низкий доход     0           203  0.01%\n",
       "5       низкий доход     1            14  0.00%\n",
       "6      очень высокий     0           208  0.01%\n",
       "7      очень высокий     1            14  0.00%\n",
       "8      средний доход     0          1899  0.09%\n",
       "9      средний доход     1           160  0.01%"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "income_debt = df.pivot_table(index = ['total_income_group', 'debt'], values = 'total_income', aggfunc = 'count').reset_index()\n",
    "\n",
    "def share(col):\n",
    "    return \"{0:.2f}%\".format(col/len(df)) \n",
    "\n",
    "income_debt['share']=income_debt['total_income'].apply(share)\n",
    "\n",
    "income_debt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Вывод"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Люди с высоким доходом и с доходом выше среднего чаще имеют задолженность по кредиту, чем с низким, средним и очень высоким. Можно предположить, что те, кто получают мало, не готовы дополнительно платить и за просроченный платеж по кредиту, а у людей с высоким доходом проблем с выплатами не возникает."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Как разные цели кредита влияют на его возврат в срок?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>category_purpose</th>\n",
       "      <th>debt</th>\n",
       "      <th>purpose</th>\n",
       "      <th>share</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>автомобиль</td>\n",
       "      <td>0</td>\n",
       "      <td>3903</td>\n",
       "      <td>0.18%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>автомобиль</td>\n",
       "      <td>1</td>\n",
       "      <td>403</td>\n",
       "      <td>0.02%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>жилье</td>\n",
       "      <td>0</td>\n",
       "      <td>3548</td>\n",
       "      <td>0.17%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>жилье</td>\n",
       "      <td>1</td>\n",
       "      <td>260</td>\n",
       "      <td>0.01%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>недвижимость</td>\n",
       "      <td>0</td>\n",
       "      <td>4082</td>\n",
       "      <td>0.19%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>недвижимость</td>\n",
       "      <td>1</td>\n",
       "      <td>317</td>\n",
       "      <td>0.01%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>образование</td>\n",
       "      <td>0</td>\n",
       "      <td>3643</td>\n",
       "      <td>0.17%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>образование</td>\n",
       "      <td>1</td>\n",
       "      <td>370</td>\n",
       "      <td>0.02%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>операция</td>\n",
       "      <td>0</td>\n",
       "      <td>2399</td>\n",
       "      <td>0.11%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>операция</td>\n",
       "      <td>1</td>\n",
       "      <td>205</td>\n",
       "      <td>0.01%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>10</td>\n",
       "      <td>свадьба</td>\n",
       "      <td>0</td>\n",
       "      <td>2138</td>\n",
       "      <td>0.10%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>11</td>\n",
       "      <td>свадьба</td>\n",
       "      <td>1</td>\n",
       "      <td>186</td>\n",
       "      <td>0.01%</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   category_purpose  debt  purpose  share\n",
       "0        автомобиль     0     3903  0.18%\n",
       "1        автомобиль     1      403  0.02%\n",
       "2             жилье     0     3548  0.17%\n",
       "3             жилье     1      260  0.01%\n",
       "4      недвижимость     0     4082  0.19%\n",
       "5      недвижимость     1      317  0.01%\n",
       "6       образование     0     3643  0.17%\n",
       "7       образование     1      370  0.02%\n",
       "8          операция     0     2399  0.11%\n",
       "9          операция     1      205  0.01%\n",
       "10          свадьба     0     2138  0.10%\n",
       "11          свадьба     1      186  0.01%"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "purpose_debt = df.pivot_table(index = ['category_purpose', 'debt'], values = 'purpose', aggfunc = 'count').reset_index()\n",
    "\n",
    "def share(col):\n",
    "    return \"{0:.2f}%\".format(col/len(df)) \n",
    "\n",
    "purpose_debt['share']=purpose_debt['purpose'].apply(share)    \n",
    "purpose_debt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Вывод\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Самая высокая доля задолжников - те, кто брали кредит для покупки автомобиля.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Шаг 4. Общий вывод"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Перед началом анализа была проведена предобработка данных: \n",
    "- пропущенные значения в столбце days_employed были заменены на среднее значение и в столбце total_income на медианное значение. - удалены дубликаты в столбце education\n",
    "- удалены повторяющиеся строки\n",
    "- устраненны ошибочные отрицательные значения и опечатка в столбце children.\n",
    "\n",
    "Также были выделенные ключевые слова для столбца purpose и опредлены самые популярные цели для кредитов - приобретение недвижимости и жилья,покупка автомобиля, образование, операции и свадьбы.\n",
    "\n",
    "Данные были разделены на несколько категорий - по наличию детей, семейному положению, доходу и целям. В датафрейм добавлены соответствующие столбцы -children_category, marriage_status, total_income_group, category_purpose\n",
    "\n",
    "Наличие детей не влияет на факт погашения кредита в срок, а вот их отстутвие, наоборот, повышает вероятность стать задолжником.\n",
    "Задолженность по кредиту чаще возникает у людей женатых/замужних. \n",
    "У людей с высоким доходом и доходом выше среднего задолженности возникают чаще, чем у людей с низким, средним и очень высоким.\n",
    "Цель кредита - автомобиль - самая популярная среди должников. "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.8"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": true,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
